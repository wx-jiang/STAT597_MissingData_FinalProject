lm_model3 = lm(d_with_covariate[, ncol(d) - 3] ~ .,
data = d_with_covariate[, -c(ncol(d) - c(0, 1, 2, 3))])
# impute second last variable
d[!complete_idx, ncol(d) - 1] = predict.lm(lm_model1, newdata = d_with_covariate[!complete_idx, -c(ncol(d) - c(0, 1, 2, 3))])
# impute third last variable
d[!complete_idx, ncol(d) - 2] = predict.lm(lm_model2, newdata = d_with_covariate[!complete_idx, -c(ncol(d) - c(0, 1, 2, 3))])
# impute fourth last variable
d[!complete_idx, ncol(d) - 3] = predict.lm(lm_model3, newdata = d_with_covariate[!complete_idx, -c(ncol(d) - c(0, 1, 2, 3))])
# impute last column
d[!complete_idx, ncol(d)] = 1 - rowSums(d[!complete_idx, ], na.rm = T)
# fix the issue that the row sum might go above 1
d = ifelse(d < 0, 0, d)
d = d / rowSums(d)
return(d)
} else if (ncol_missing == 11) {
# fit regression on the second last variable using complete column and covariates
lm_model1 = lm(d_with_covariate[, ncol(d) - 1] ~ .,
data = d_with_covariate[, -c(ncol(d) - c(0:10))])
# fit regression on the third last variable using complete column and covariates
lm_model2 = lm(d_with_covariate[, ncol(d) - 2] ~ .,
data = d_with_covariate[, -c(ncol(d) - c(0:10))])
# fit regression on the fourth last variable using complete column and covariates
lm_model3 = lm(d_with_covariate[, ncol(d) - 3] ~ .,
data = d_with_covariate[, -c(ncol(d) - c(0:10))])
# fit regression on the fifth last variable using complete column and covariates
lm_model4 = lm(d_with_covariate[, ncol(d) - 4] ~ .,
data = d_with_covariate[, -c(ncol(d) - c(0:10))])
# fit regression on the sixth last variable using complete column and covariates
lm_model5 = lm(d_with_covariate[, ncol(d) - 5] ~ .,
data = d_with_covariate[, -c(ncol(d) - c(0:10))])
# fit regression on the seventh last variable using complete column and covariates
lm_model6 = lm(d_with_covariate[, ncol(d) - 6] ~ .,
data = d_with_covariate[, -c(ncol(d) - c(0:10))])
# fit regression on the eighth last variable using complete column and covariates
lm_model7 = lm(d_with_covariate[, ncol(d) - 7] ~ .,
data = d_with_covariate[, -c(ncol(d) - c(0:10))])
# fit regression on the nineth last variable using complete column and covariates
lm_model8 = lm(d_with_covariate[, ncol(d) - 8] ~ .,
data = d_with_covariate[, -c(ncol(d) - c(0:10))])
# fit regression on the tenth last variable using complete column and covariates
lm_model9 = lm(d_with_covariate[, ncol(d) - 9] ~ .,
data = d_with_covariate[, -c(ncol(d) - c(0:10))])
# fit regression on the eleventh last variable using complete column and covariates
lm_model10 = lm(d_with_covariate[, ncol(d) - 10] ~ .,
data = d_with_covariate[, -c(ncol(d) - c(0:10))])
# impute second last variable
d[!complete_idx, ncol(d) - 1] = predict.lm(lm_model1, newdata = d_with_covariate[!complete_idx, -c(ncol(d) - c(0:10))])
# impute third last variable
d[!complete_idx, ncol(d) - 2] = predict.lm(lm_model2, newdata = d_with_covariate[!complete_idx, -c(ncol(d) - c(0:10))])
# impute fourth last variable
d[!complete_idx, ncol(d) - 3] = predict.lm(lm_model3, newdata = d_with_covariate[!complete_idx, -c(ncol(d) - c(0:10))])
# impute 5 last variable
d[!complete_idx, ncol(d) - 4] = predict.lm(lm_model4, newdata = d_with_covariate[!complete_idx, -c(ncol(d) - c(0:10))])
# impute 6 last variable
d[!complete_idx, ncol(d) - 5] = predict.lm(lm_model5, newdata = d_with_covariate[!complete_idx, -c(ncol(d) - c(0:10))])
# impute 7 last variable
d[!complete_idx, ncol(d) - 6] = predict.lm(lm_model6, newdata = d_with_covariate[!complete_idx, -c(ncol(d) - c(0:10))])
# impute 8 last variable
d[!complete_idx, ncol(d) - 7] = predict.lm(lm_model7, newdata = d_with_covariate[!complete_idx, -c(ncol(d) - c(0:10))])
# impute 9 last variable
d[!complete_idx, ncol(d) - 8] = predict.lm(lm_model8, newdata = d_with_covariate[!complete_idx, -c(ncol(d) - c(0:10))])
# impute 10 last variable
d[!complete_idx, ncol(d) - 9] = predict.lm(lm_model9, newdata = d_with_covariate[!complete_idx, -c(ncol(d) - c(0:10))])
# impute 11 last variable
d[!complete_idx, ncol(d) - 10] = predict.lm(lm_model10, newdata = d_with_covariate[!complete_idx, -c(ncol(d) - c(0:10))])
# impute last column
d[!complete_idx, ncol(d)] = 1 - rowSums(d[!complete_idx, ], na.rm = T)
# fix the issue that the row sum might go above 1
d = ifelse(d < 0, 0, d)
d = d / rowSums(d)
return(d)
}
}
reg_imp(arch3mis2pct10, 2, MetaData) |> head()
reg_imp(arch6mis2pct10, 2, MetaData) |> head()
#### Load Data ----
load("Data/MetaData_and_Missing_Data")
MetaData = dataStore[[1]]
arch3mis2pct10 = dataStore[[2]]
arch3mis2pct30 = dataStore[[3]]
arch3mis2pct90 = dataStore[[4]]
arch6mis2pct10 = dataStore[[5]]
arch6mis2pct30 = dataStore[[6]]
arch6mis2pct90 = dataStore[[7]]
arch6mis4pct10 = dataStore[[8]]
arch6mis4pct30 = dataStore[[9]]
arch6mis4pct90 = dataStore[[10]]
View(arch6mis2pct30)
arch12mis2pct10 = dataStore[[11]]
arch12mis2pct30 = dataStore[[12]]
arch12mis2pct90 = dataStore[[13]]
arch12mis4pct10 = dataStore[[14]]
arch12mis4pct30 = dataStore[[15]]
arch12mis4pct90 = dataStore[[16]]
arch12mis11pct10 = dataStore[[17]]
arch12mis11pct30 = dataStore[[18]]
arch12mis11pct90 = dataStore[[19]]
View(arch6mis4pct90)
View(arch6mis4pct30)
View(arch6mis4pct10)
View(arch6mis2pct90)
View(arch6mis2pct30)
View(arch6mis2pct10)
View(arch3mis2pct90)
View(arch3mis2pct30)
View(arch3mis2pct30)
View(arch3mis2pct10)
View(arch12mis4pct90)
View(arch12mis4pct30)
View(arch12mis4pct10)
View(arch12mis2pct90)
View(arch12mis2pct30)
View(arch12mis2pct30)
View(arch12mis11pct90)
View(arch12mis11pct30)
View(arch12mis11pct30)
View(arch12mis11pct10)
# confirm no missing data in MetaData
sum(complete.cases(MetaData))
nrow(MetaData)
reg_imp <- function(d, ncol_missing, covariate_data) {
d_with_covariate = cbind(d, covariate_data)
complete_idx = complete.cases(d_with_covariate)
# d_with_covariate_complete = d_with_covariate[complete_idx,]
if (ncol_missing == 2) {
# fit regression on the second last variable using complete column and covariates
lm_model = lm(d_with_covariate[, ncol(d) - 1] ~ .,
data = d_with_covariate[, -c(ncol(d) - 1, ncol(d))])
# impute second last variable
d[!complete_idx, ncol(d) - 1] = predict.lm(lm_model, newdata = d_with_covariate[!complete_idx, -c(ncol(d) - 1, ncol(d))])
# impute last column
d[!complete_idx, ncol(d)] = 1 - rowSums(d[!complete_idx, ], na.rm = T)
# fix the issue that the row sum might go above 1
d = ifelse(d < 0, 0, d)
d = d / rowSums(d)
return(d)
} else if (ncol_missing == 4) {
# fit regression on the second last variable using complete column and covariates
lm_model1 = lm(d_with_covariate[, ncol(d) - 1] ~ .,
data = d_with_covariate[, -c(ncol(d) - c(0, 1, 2, 3))])
# fit regression on the third last variable using complete column and covariates
lm_model2 = lm(d_with_covariate[, ncol(d) - 2] ~ .,
data = d_with_covariate[, -c(ncol(d) - c(0, 1, 2, 3))])
# fit regression on the fourth last variable using complete column and covariates
lm_model3 = lm(d_with_covariate[, ncol(d) - 3] ~ .,
data = d_with_covariate[, -c(ncol(d) - c(0, 1, 2, 3))])
# impute second last variable
d[!complete_idx, ncol(d) - 1] = predict.lm(lm_model1, newdata = d_with_covariate[!complete_idx, -c(ncol(d) - c(0, 1, 2, 3))])
# impute third last variable
d[!complete_idx, ncol(d) - 2] = predict.lm(lm_model2, newdata = d_with_covariate[!complete_idx, -c(ncol(d) - c(0, 1, 2, 3))])
# impute fourth last variable
d[!complete_idx, ncol(d) - 3] = predict.lm(lm_model3, newdata = d_with_covariate[!complete_idx, -c(ncol(d) - c(0, 1, 2, 3))])
# impute last column
d[!complete_idx, ncol(d)] = 1 - rowSums(d[!complete_idx, ], na.rm = T)
# fix the issue that the row sum might go above 1
d = ifelse(d < 0, 0, d)
d = d / rowSums(d)
return(d)
} else if (ncol_missing == 11) {
# fit regression on the second last variable using complete column and covariates
lm_model1 = lm(d_with_covariate[, ncol(d) - 1] ~ .,
data = d_with_covariate[, -c(ncol(d) - c(0:10))])
# fit regression on the third last variable using complete column and covariates
lm_model2 = lm(d_with_covariate[, ncol(d) - 2] ~ .,
data = d_with_covariate[, -c(ncol(d) - c(0:10))])
# fit regression on the fourth last variable using complete column and covariates
lm_model3 = lm(d_with_covariate[, ncol(d) - 3] ~ .,
data = d_with_covariate[, -c(ncol(d) - c(0:10))])
# fit regression on the fifth last variable using complete column and covariates
lm_model4 = lm(d_with_covariate[, ncol(d) - 4] ~ .,
data = d_with_covariate[, -c(ncol(d) - c(0:10))])
# fit regression on the sixth last variable using complete column and covariates
lm_model5 = lm(d_with_covariate[, ncol(d) - 5] ~ .,
data = d_with_covariate[, -c(ncol(d) - c(0:10))])
# fit regression on the seventh last variable using complete column and covariates
lm_model6 = lm(d_with_covariate[, ncol(d) - 6] ~ .,
data = d_with_covariate[, -c(ncol(d) - c(0:10))])
# fit regression on the eighth last variable using complete column and covariates
lm_model7 = lm(d_with_covariate[, ncol(d) - 7] ~ .,
data = d_with_covariate[, -c(ncol(d) - c(0:10))])
# fit regression on the nineth last variable using complete column and covariates
lm_model8 = lm(d_with_covariate[, ncol(d) - 8] ~ .,
data = d_with_covariate[, -c(ncol(d) - c(0:10))])
# fit regression on the tenth last variable using complete column and covariates
lm_model9 = lm(d_with_covariate[, ncol(d) - 9] ~ .,
data = d_with_covariate[, -c(ncol(d) - c(0:10))])
# fit regression on the eleventh last variable using complete column and covariates
lm_model10 = lm(d_with_covariate[, ncol(d) - 10] ~ .,
data = d_with_covariate[, -c(ncol(d) - c(0:10))])
# impute second last variable
d[!complete_idx, ncol(d) - 1] = predict.lm(lm_model1, newdata = d_with_covariate[!complete_idx, -c(ncol(d) - c(0:10))])
# impute third last variable
d[!complete_idx, ncol(d) - 2] = predict.lm(lm_model2, newdata = d_with_covariate[!complete_idx, -c(ncol(d) - c(0:10))])
# impute fourth last variable
d[!complete_idx, ncol(d) - 3] = predict.lm(lm_model3, newdata = d_with_covariate[!complete_idx, -c(ncol(d) - c(0:10))])
# impute 5 last variable
d[!complete_idx, ncol(d) - 4] = predict.lm(lm_model4, newdata = d_with_covariate[!complete_idx, -c(ncol(d) - c(0:10))])
# impute 6 last variable
d[!complete_idx, ncol(d) - 5] = predict.lm(lm_model5, newdata = d_with_covariate[!complete_idx, -c(ncol(d) - c(0:10))])
# impute 7 last variable
d[!complete_idx, ncol(d) - 6] = predict.lm(lm_model6, newdata = d_with_covariate[!complete_idx, -c(ncol(d) - c(0:10))])
# impute 8 last variable
d[!complete_idx, ncol(d) - 7] = predict.lm(lm_model7, newdata = d_with_covariate[!complete_idx, -c(ncol(d) - c(0:10))])
# impute 9 last variable
d[!complete_idx, ncol(d) - 8] = predict.lm(lm_model8, newdata = d_with_covariate[!complete_idx, -c(ncol(d) - c(0:10))])
# impute 10 last variable
d[!complete_idx, ncol(d) - 9] = predict.lm(lm_model9, newdata = d_with_covariate[!complete_idx, -c(ncol(d) - c(0:10))])
# impute 11 last variable
d[!complete_idx, ncol(d) - 10] = predict.lm(lm_model10, newdata = d_with_covariate[!complete_idx, -c(ncol(d) - c(0:10))])
# impute last column
d[!complete_idx, ncol(d)] = 1 - rowSums(d[!complete_idx, ], na.rm = T)
# fix the issue that the row sum might go above 1
d = ifelse(d < 0, 0, d)
d = d / rowSums(d)
return(d)
}
}
# output a list of regression_imp case arch3 matrices
# can be accessed by names
arch3_Regression_Imp = lapply(
mget(paste0("arch3mis2pct", c(10, 30, 90))),
function(X) reg_imp(X, 2, MetaData)
)
names(arch3_Regression_Imp)
arch3_Regression_Imp
arch3_Regression_Imp[[1]]
arch3_Regression_Imp[[2]]
arch3_Regression_Imp[[3]]
# output a list of complete case arch6 matrices
# can be accessed by names
arch6_Regression_Imp = lapply(
mget(paste0("arch6mis", c(rep(2, 3), rep(4, 3)), "pct", c(10, 30, 90))),
function(X) ifelse( (sum(colSums(is.na(X)) != 0) == 4), # number of missing columns
reg_imp(X, 4, MetaData),
reg_imp(X, 2, MetaData))
)
arch6_Regression_Imp[[1]]
paste0("arch6mis", c(rep(2, 3), rep(4, 3)), "pct", c(10, 30, 90))
# output a list of complete case arch6 matrices
# can be accessed by names
arch6_Regression_Imp = lapply(
# mget(paste0("arch6mis", c(rep(2, 3), rep(4, 3)), "pct", c(10, 30, 90))),
mget(paste0("arch6mis", c(2), "pct", c(10))),
function(X) ifelse( (sum(colSums(is.na(X)) != 0) == 4), # number of missing columns
reg_imp(X, 4, MetaData),
reg_imp(X, 2, MetaData))
)
names(arch6_Regression_Imp)
arch6_Regression_Imp[[1]]
# output a list of complete case arch6 matrices
# can be accessed by names
arch6_Regression_Imp = lapply(
# mget(paste0("arch6mis", c(rep(2, 3), rep(4, 3)), "pct", c(10, 30, 90))),
mget(paste0("arch6mis", c(2), "pct", c(10))),
function(X) ifelse( (sum(colSums(is.na(X)) != 0) == 4), # number of missing columns
{print("4 columns") reg_imp(X, 4, MetaData)},
# output a list of complete case arch6 matrices
# can be accessed by names
arch6_Regression_Imp = lapply(
# mget(paste0("arch6mis", c(rep(2, 3), rep(4, 3)), "pct", c(10, 30, 90))),
mget(paste0("arch6mis", c(2), "pct", c(10))),
function(X) ifelse( (sum(colSums(is.na(X)) != 0) == 4), # number of missing columns
{print("4 columns")
reg_imp(X, 4, MetaData)},
reg_imp(X, 2, MetaData))
)
# output a list of complete case arch6 matrices
# can be accessed by names
arch6_Regression_Imp = lapply(
# mget(paste0("arch6mis", c(rep(2, 3), rep(4, 3)), "pct", c(10, 30, 90))),
mget(paste0("arch6mis", c(2), "pct", c(10))),
function(X) ifelse( (sum(colSums(is.na(X)) != 0) == 4), # number of missing columns
{print("4 columns")
reg_imp(X, 4, MetaData)},
reg_imp(X, 2, MetaData))
)
lapply(
# mget(paste0("arch6mis", c(rep(2, 3), rep(4, 3)), "pct", c(10, 30, 90))),
mget(paste0("arch6mis", c(2), "pct", c(10))),
function(X) ifelse( (sum(colSums(is.na(X)) != 0) == 4), # number of missing columns
{print("4 columns")
reg_imp(X, 4, MetaData)},
reg_imp(X, 2, MetaData))
)
lapply(
# mget(paste0("arch6mis", c(rep(2, 3), rep(4, 3)), "pct", c(10, 30, 90))),
mget(paste0("arch6mis", c(2), "pct", c(10))),
function(X) print(sum(colSums(is.na(X)) != 0) == 4)
# function(X) ifelse( (sum(colSums(is.na(X)) != 0) == 4), # number of missing columns
#                     reg_imp(X, 4, MetaData),
#                     reg_imp(X, 2, MetaData))
)
lapply(
# mget(paste0("arch6mis", c(rep(2, 3), rep(4, 3)), "pct", c(10, 30, 90))),
mget(paste0("arch6mis", c(2), "pct", c(10))),
function(X) print(sum(colSums(is.na(X)) != 0) == 4)
# function(X) ifelse( (sum(colSums(is.na(X)) != 0) == 4), # number of missing columns
#                     reg_imp(X, 4, MetaData),
#                     reg_imp(X, 2, MetaData))
)
lapply(
# mget(paste0("arch6mis", c(rep(2, 3), rep(4, 3)), "pct", c(10, 30, 90))),
mget(paste0("arch6mis", c(2), "pct", c(10))),
function(X) (sum(colSums(is.na(X)) != 0) == 4)
# function(X) ifelse( (sum(colSums(is.na(X)) != 0) == 4), # number of missing columns
#                     reg_imp(X, 4, MetaData),
#                     reg_imp(X, 2, MetaData))
)
lapply(
# mget(paste0("arch6mis", c(rep(2, 3), rep(4, 3)), "pct", c(10, 30, 90))),
mget(paste0("arch6mis", c(2), "pct", c(10))),
function(X) reg_imp(X, 2, MetaData)
# function(X) ifelse( (sum(colSums(is.na(X)) != 0) == 4), # number of missing columns
#                     reg_imp(X, 4, MetaData),
#                     reg_imp(X, 2, MetaData))
)
lapply(
# mget(paste0("arch6mis", c(rep(2, 3), rep(4, 3)), "pct", c(10, 30, 90))),
mget(paste0("arch6mis", c(2), "pct", c(10))),
function(X) reg_imp(X, 2, MetaData)
# function(X) ifelse( (sum(colSums(is.na(X)) != 0) == 4), # number of missing columns
#                     reg_imp(X, 4, MetaData),
#                     reg_imp(X, 2, MetaData))
)
ifelse( (sum(colSums(is.na(arch6mis2pct10)) != 0) == 4), # number of missing columns
reg_imp(X, 4, MetaData),
reg_imp(X, 2, MetaData))
ifelse( (sum(colSums(is.na(arch6mis2pct10)) != 0) == 4), # number of missing columns
reg_imp(arch6mis2pct10, 4, MetaData),
reg_imp(arch6mis2pct10, 2, MetaData))
?ifelse
lapply(
# mget(paste0("arch6mis", c(rep(2, 3), rep(4, 3)), "pct", c(10, 30, 90))),
mget(paste0("arch6mis", c(2), "pct", c(10))),
# function(X) reg_imp(X, 2, MetaData)
function(X) ifelse( (sum(colSums(is.na(X)) != 0) == 4), # number of missing columns
reg_imp(X, 4, MetaData),
reg_imp(X, 2, MetaData))
)
lapply(
# mget(paste0("arch6mis", c(rep(2, 3), rep(4, 3)), "pct", c(10, 30, 90))),
mget(paste0("arch6mis", c(2), "pct", c(10))),
# function(X) reg_imp(X, 2, MetaData)
function(X) ifelse( (sum(colSums(is.na(X)) != 0) == 4), # number of missing columns
reg_imp(X, 4, MetaData),
reg_imp(X, 2, MetaData))
)
lapply(
# mget(paste0("arch6mis", c(rep(2, 3), rep(4, 3)), "pct", c(10, 30, 90))),
mget(paste0("arch6mis", c(2), "pct", c(10))),
# function(X) reg_imp(X, 2, MetaData)
function(X) ifelse( (sum(colSums(is.na(X)) != 0) == 4), # number of missing columns
reg_imp(X, 4, MetaData),
reg_imp(X, 2, MetaData))
)
lapply(
# mget(paste0("arch6mis", c(rep(2, 3), rep(4, 3)), "pct", c(10, 30, 90))),
mget(paste0("arch6mis", c(2), "pct", c(10))),
# function(X) reg_imp(X, 2, MetaData)
function(X) ifelse( (sum(colSums(is.na(X)) != 0) == 4), # number of missing columns
reg_imp(X, 4, MetaData),
reg_imp(X, 2, MetaData))
)
# output a list of complete case arch6 matrices
# can be accessed by names
arch6_Regression_Imp = lapply(
# mget(paste0("arch6mis", c(rep(2, 3), rep(4, 3)), "pct", c(10, 30, 90))),
mget(paste0("arch6mis", c(2), "pct", c(10))),
# function(X) reg_imp(X, 2, MetaData)
# function(X) ifelse( (sum(colSums(is.na(X)) != 0) == 4), # number of missing columns
#                     reg_imp(X, 4, MetaData),
#                     reg_imp(X, 2, MetaData))
function(X) ifelse( (sum(colSums(is.na(X)) != 0) == 4), # number of missing columns
print("True"),
print("False"))
)
lapply(
# mget(paste0("arch6mis", c(rep(2, 3), rep(4, 3)), "pct", c(10, 30, 90))),
mget(paste0("arch6mis", c(2), "pct", c(10))),
# function(X) reg_imp(X, 2, MetaData)
# function(X) ifelse( (sum(colSums(is.na(X)) != 0) == 4), # number of missing columns
#                     reg_imp(X, 4, MetaData),
#                     reg_imp(X, 2, MetaData))
function(X) ifelse( (sum(colSums(is.na(X)) != 0) == 4), # number of missing columns
print("True"),
print("False"))
)
lapply(
# mget(paste0("arch6mis", c(rep(2, 3), rep(4, 3)), "pct", c(10, 30, 90))),
mget(paste0("arch6mis", c(2), "pct", c(10))),
# function(X) reg_imp(X, 2, MetaData)
# function(X) ifelse( (sum(colSums(is.na(X)) != 0) == 4), # number of missing columns
#                     reg_imp(X, 4, MetaData),
#                     reg_imp(X, 2, MetaData))
function(X) ifelse( (sum(colSums(is.na(X)) != 0) == 4), # number of missing columns
print("True"),
print("False"))
)
lapply(
# mget(paste0("arch6mis", c(rep(2, 3), rep(4, 3)), "pct", c(10, 30, 90))),
mget(paste0("arch6mis", c(2), "pct", c(10))),
# function(X) reg_imp(X, 2, MetaData)
# function(X) ifelse( (sum(colSums(is.na(X)) != 0) == 4), # number of missing columns
#                     reg_imp(X, 4, MetaData),
#                     reg_imp(X, 2, MetaData))
function(X) ifelse((sum(colSums(is.na(X)) != 0) == 4), # number of missing columns
c(1:3),
c(10:11))
)
# output a list of complete case arch6 matrices
# can be accessed by names
arch6_Regression_Imp = lapply(
# mget(paste0("arch6mis", c(rep(2, 3), rep(4, 3)), "pct", c(10, 30, 90))),
mget(paste0("arch6mis", c(2), "pct", c(10))),
# function(X) reg_imp(X, 2, MetaData)
# function(X) ifelse( (sum(colSums(is.na(X)) != 0) == 4), # number of missing columns
#                     reg_imp(X, 4, MetaData),
#                     reg_imp(X, 2, MetaData))
function(X) ifelse((sum(colSums(is.na(X)) != 0) == 4), # number of missing columns
c(1:3),
c(10:11))
)
arch6_Regression_Imp[[1]]
petal
car
cars
# output a list of complete case arch6 matrices
# can be accessed by names
arch6_Regression_Imp = lapply(
# mget(paste0("arch6mis", c(rep(2, 3), rep(4, 3)), "pct", c(10, 30, 90))),
mget(paste0("arch6mis", c(2), "pct", c(10))),
# function(X) reg_imp(X, 2, MetaData)
# function(X) ifelse( (sum(colSums(is.na(X)) != 0) == 4), # number of missing columns
#                     reg_imp(X, 4, MetaData),
#                     reg_imp(X, 2, MetaData))
function(X) ifelse((sum(colSums(is.na(X)) != 0) == 4), # number of missing columns
c(1:3),
cars)
)
arch6_Regression_Imp[[1]]
cars
# output a list of complete case arch6 matrices
# can be accessed by names
arch6_Regression_Imp = lapply(
mget(paste0("arch6mis", c(rep(2, 3), rep(4, 3)), "pct", c(10, 30, 90))),
# function(X) ifelse( (sum(colSums(is.na(X)) != 0) == 4), # number of missing columns
#                     reg_imp(X, 4, MetaData),
#                     reg_imp(X, 2, MetaData))
function(X) ifelse((sum(colSums(is.na(X)) != 0) == 4), # number of missing columns
c(1:3),
cars)
)
arch6_Regression_Imp[[1]]
# output a list of complete case arch6 matrices
# can be accessed by names
arch6_Regression_Imp = lapply(
mget(paste0("arch6mis", c(rep(2, 3), rep(4, 3)), "pct", c(10, 30, 90))),
# function(X) ifelse( (sum(colSums(is.na(X)) != 0) == 4), # number of missing columns
#                     reg_imp(X, 4, MetaData),
#                     reg_imp(X, 2, MetaData))
function(X) cars
)
arch6_Regression_Imp[[1]]
# output a list of complete case arch6 matrices
# can be accessed by names
arch6_Regression_Imp = lapply(
mget(paste0("arch6mis", c(rep(2, 3), rep(4, 3)), "pct", c(10, 30, 90))),
function(X) {
if (sum(colSums(is.na(X)) != 0) == 4) {
reg_imp(X, 4, MetaData)
} else {reg_imp(X, 2, MetaData)}
}
)
names(arch6_Regression_Imp)
arch6_Regression_Imp[[1]]
arch6_Regression_Imp[[2]]
arch6_Regression_Imp[[3]]
# output a list of complete case arch12 matrices
# can be accessed by names
arch12_Regression_Imp = lapply(
mget(paste0("arch12mis", c(rep(2, 3), rep(4, 3), rep(11, 3)), "pct", c(10, 30, 90))), {
function(X) if (sum(colSums(is.na(X)) != 0) == 11) { # number of missing columns
reg_imp(X, 11, MetaData)
} else if (sum(colSums(is.na(X)) != 0) == 4) {
reg_imp(X, 4, MetaData)
} else if (sum(colSums(is.na(X)) != 0) == 2) {
reg_imp(X, 2, MetaData)
}
}
)
names(arch12_Regression_Imp)
arch12_Regression_Imp
arch12_Regression_Imp[[1]]
arch12_Regression_Imp[[2]]
arch12_Regression_Imp[[12]]
arch12_Regression_Imp[[9]]
lapply(arch3_Regression_Imp, function(X) colSums(is.na(X)))
lapply(arch6_Regression_Imp, function(X) colSums(is.na(X)))
lapply(arch12_Regression_Imp, function(X) colSums(is.na(X)))
## save RData
save(list = c("arch3_Regression_Imp", "arch6_Regression_Imp", "arch12_Regression_Imp"),
file = "imputed_data/Linear_regression_Imp_data.RData")
lapply(arch3_Regression_Imp, function(X) sum(rowSums(X) != 1))
lapply(arch6_Regression_Imp, function(X) sum(rowSums(X) != 1))
lapply(arch12_Regression_Imp, function(X) sum(rowSums(X) != 1))
rowSums(arch6mis2pct10[which(rowSums(arch6mis2pct10) != 1), ])
arch3mis2pct10
View(arch3mis2pct10)
View(arch6mis2pct10)
View(MetaData)
?mice
??mice
